// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type WeatherHTTPServer interface {
	GetNowWeather(context.Context, *GetNowWeatherRequest) (*GetNowWeatherResponse, error)
}

func RegisterWeatherHTTPServer(s *http.Server, srv WeatherHTTPServer) {
	r := s.Route("/")
	r.GET("/weather/v1/now", _Weather_GetNowWeather0_HTTP_Handler(srv))
}

func _Weather_GetNowWeather0_HTTP_Handler(srv WeatherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNowWeatherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.weather.Weather/GetNowWeather")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNowWeather(ctx, req.(*GetNowWeatherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNowWeatherResponse)
		return ctx.Result(200, reply)
	}
}

type WeatherHTTPClient interface {
	GetNowWeather(ctx context.Context, req *GetNowWeatherRequest, opts ...http.CallOption) (rsp *GetNowWeatherResponse, err error)
}

type WeatherHTTPClientImpl struct {
	cc *http.Client
}

func NewWeatherHTTPClient(client *http.Client) WeatherHTTPClient {
	return &WeatherHTTPClientImpl{client}
}

func (c *WeatherHTTPClientImpl) GetNowWeather(ctx context.Context, in *GetNowWeatherRequest, opts ...http.CallOption) (*GetNowWeatherResponse, error) {
	var out GetNowWeatherResponse
	pattern := "/weather/v1/now"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.weather.Weather/GetNowWeather"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
